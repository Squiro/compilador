package Analizadores;
import java_cup.runtime.*;
import SymbolTable.*;
import java.util.LinkedList;
import java.util.ArrayList;
import java.util.Queue;

// Codigo que se le agrega a las acciones gramaticales
action code
{:
     public SymbolTable tablaDeSimbolos = new SymbolTable();
     public ArrayList<String> identifierList = new ArrayList();
:}

// Codigo que se le agrega al parser
parser code     
{:
    public void syntax_error(Symbol cur_token) {
        String errMsg = "Syntax error -> " + cur_token.value.toString() + " <- " + cur_token.left + ":" +  cur_token.right + "\n";
        report_error(errMsg, null);
    }

    public void unrecovered_syntax_error(Symbol cur_token) throws Exception {
        String errMsg = "Couldn't repair and continue parse ->" + cur_token.value.toString() + "<- " + cur_token.left + ":" +  cur_token.right + "\n";
        report_fatal_error(errMsg, null);
    }
:}

// Declaracion de terminales de constantes
terminal String CONSTANTE_ENTERA, CONSTANTE_FLOAT, CONSTANTE_STRING;

// Declaracion de terminales de palabras reservadas
terminal String IF, ELSE, WHILE, DECVAR, ENDDEC, WRITE, READ, INLIST, MOD, DIV, INTEGER_TYPE, FLOAT_TYPE, STRING_TYPE;

// Declaracion de terminales de operadores lÃ³gicos
terminal String OP_GT, OP_LT, OP_GTE, OP_LTE, OP_PLUS, OP_MINUS, OP_MULTI, OP_DIVISION,
                OP_NE, OP_NOT, OP_AND, OP_OR, OP_ASIG, OP_EQ, OP_TYPE;

// Declaracion de terminales de caracteres especiales
terminal String COMA, PUNTO_COMA, PAREN_OPEN, PAREN_CLOSE, CORCHETE_OPEN, CORCHETE_CLOSE, LLAVE_OPEN, LLAVE_CLOSE;

// Declaracion de construcciones del lenguaje
terminal String IDENTIFICADOR;

// Declaracion de no terminales
non terminal Symbol inicio, programa, declaracion, declaraciones, declarar, tipodedato, identificadores, sentencia, asignacion, expresion, termino, factor, 
                    condicion, comparacion, if, while, inlist, lista, mod, div, write, read;

start with inicio;

//Reglas gramaticales
inicio         	::= programa
                    {:
                         tablaDeSimbolos.save();
                         System.out.println("Compilacion exitosa.");
                         System.out.println("<3 Gracias por utilizar el compilador desarrollado por el Grupo 2. <3");
                    :};  

programa      		::= programa sentencia
                    | sentencia;

sentencia           ::= declaracion
                    {:
                         System.out.println("sentencia -> declaracion");
                    :}
                    | asignacion 
                    {:
                         System.out.println("sentencia -> asignacion");
                    :}
                    | if 
                    {:
                         System.out.println("sentencia -> if");
                    :}
                    | while 
                    {:
                         System.out.println("sentencia -> while");
                    :}
                    | inlist 
                    {:
                         System.out.println("sentencia -> inlist");
                    :}
                    | write 
                    {:
                         System.out.println("sentencia -> write");
                    :}
                    | read 
                    {:
                         System.out.println("sentencia -> read");
                    :};

/*
            DECLARACIONES
*/

declaracion         ::= DECVAR declaraciones ENDDEC
                    {: 
                         System.out.println("declaracion -> DECVAR declaraciones ENDDEC");
                    :};

declaraciones      ::= declarar
                    | declaraciones declarar;

declarar            ::= identificadores OP_TYPE tipodedato;

tipodedato          ::= INTEGER_TYPE
                    {:
                         tablaDeSimbolos.addIdentifiers(this.identifierList, "INTEGER");
                    :}
                    | FLOAT_TYPE
                    {:
                         tablaDeSimbolos.addIdentifiers(this.identifierList, "FLOAT");                       
                    :}
                    | STRING_TYPE
                    {:
                         tablaDeSimbolos.addIdentifiers(this.identifierList, "STRING");                         
                    :};

identificadores     ::= IDENTIFICADOR:ID
                    {:
                         this.identifierList.add(ID);
                    :}
                    | identificadores COMA IDENTIFICADOR:ID
                    {:
                         this.identifierList.add(ID);
                    :};
/*
            ASIGNACION
*/
asignacion          ::= IDENTIFICADOR OP_ASIG expresion
                    {:
                         System.out.println("asignacion -> IDENTIFICADOR OP_ASIG expresion");
                    :};

expresion           ::= expresion OP_PLUS termino 
                    | expresion OP_MINUS termino 
                    | termino;

termino             ::= termino OP_MULTI factor
                    | termino OP_DIVISION factor
                    | termino MOD factor 
                    | termino DIV factor
                    | factor;

factor              ::= CONSTANTE_ENTERA:CTE_ENT
                    {:
                         tablaDeSimbolos.add("_"+CTE_ENT, null, CTE_ENT, null);
                    :}
                    | CONSTANTE_FLOAT:CTE_FLOAT
                    {:
                         tablaDeSimbolos.add("_"+CTE_FLOAT, null, CTE_FLOAT, null);                         
                    :} 
                    | CONSTANTE_STRING:CTE_STRING
                    {:
                         String str = CTE_STRING.replace("\"", "");
                         tablaDeSimbolos.add("_"+str, null, str, str.length());
                    :}
                    | PAREN_OPEN expresion PAREN_CLOSE 
                    | IDENTIFICADOR
                    | PAREN_OPEN mod PAREN_CLOSE
                    | PAREN_OPEN div PAREN_CLOSE;

/*
            IF/ELSE/CONDITION
*/
if                  ::= IF PAREN_OPEN condicion PAREN_CLOSE LLAVE_OPEN programa LLAVE_CLOSE
                    {:
                         System.out.println("if -> IF PAREN_OPEN condicion PAREN_CLOSE LLAVE_OPEN programa LLAVE_CLOSE");
                    :}
                    | IF PAREN_OPEN condicion PAREN_CLOSE LLAVE_OPEN programa LLAVE_CLOSE ELSE LLAVE_OPEN programa LLAVE_CLOSE 
                    {:
                         System.out.println("if -> IF PAREN_OPEN condicion PAREN_CLOSE LLAVE_OPEN programa LLAVE_CLOSE ELSE LLAVE_OPEN programa LLAVE_CLOSE");
                    :};

condicion           ::= comparacion OP_AND comparacion 
                    | comparacion OP_OR comparacion
                    | OP_NOT PAREN_OPEN comparacion PAREN_CLOSE
                    | comparacion;

comparacion         ::= expresion OP_GT expresion 
                    | expresion OP_LT expresion
                    | expresion OP_GTE expresion 
                    | expresion OP_LTE expresion
                    | expresion OP_EQ expresion
                    | expresion OP_NE expresion;

/*
            WHILE
*/

while               ::= WHILE PAREN_OPEN condicion PAREN_CLOSE LLAVE_OPEN programa LLAVE_CLOSE  
                    {:
                         System.out.println("while -> WHILE PAREN_OPEN condicion PAREN_CLOSE LLAVE_OPEN programa LLAVE_CLOSE");
                    :};

/*
            INLIST
*/

inlist              ::= INLIST PAREN_OPEN IDENTIFICADOR PUNTO_COMA CORCHETE_OPEN lista CORCHETE_CLOSE PAREN_CLOSE
                    {:
                         System.out.println("inlist -> INLIST PAREN_OPEN IDENTIFICADOR PUNTO_COMA CORCHETE_OPEN lista CORCHETE_CLOSE PAREN_CLOSE");
                    :};

lista               ::= lista PUNTO_COMA expresion  
                    | expresion;

/*
            WRITE
*/
write               ::= WRITE IDENTIFICADOR
                    {:
                         System.out.println("write -> WRITE IDENTIFICADOR");
                    :}
                    | WRITE CONSTANTE_STRING:CTE_STRING
                    {:
                         String str = CTE_STRING.replace("\"", "");
                         System.out.println("write -> WRITE CONSTANTE_STRING");
                         tablaDeSimbolos.add("_"+str, null, str, str.length());
                    :};

/*
            READ
*/
read                ::= READ IDENTIFICADOR
                    {:
                         System.out.println("read -> READ IDENTIFICADOR");
                    :};
