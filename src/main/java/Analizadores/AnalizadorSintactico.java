
//----------------------------------------------------
// The following code was generated by CUP v0.11b 20160615 (GIT 4ac7450)
//----------------------------------------------------

package Analizadores;

import java_cup.runtime.*;
import SymbolTable.*;
import java.util.LinkedList;
import java.util.ArrayList;
import java.util.Queue;
import java_cup.runtime.XMLElement;

/** CUP v0.11b 20160615 (GIT 4ac7450) generated parser.
  */
@SuppressWarnings({"rawtypes"})
public class AnalizadorSintactico extends java_cup.runtime.lr_parser {

 public final Class getSymbolContainer() {
    return Simbolos.class;
}

  /** Default constructor. */
  @Deprecated
  public AnalizadorSintactico() {super();}

  /** Constructor which sets the default scanner. */
  @Deprecated
  public AnalizadorSintactico(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public AnalizadorSintactico(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\067\000\002\002\004\000\002\002\003\000\002\003" +
    "\004\000\002\003\003\000\002\011\003\000\002\011\003" +
    "\000\002\011\003\000\002\011\003\000\002\011\003\000" +
    "\002\011\003\000\002\011\003\000\002\004\005\000\002" +
    "\005\003\000\002\005\004\000\002\006\005\000\002\007" +
    "\003\000\002\007\003\000\002\007\003\000\002\010\003" +
    "\000\002\010\005\000\002\012\005\000\002\013\005\000" +
    "\002\013\005\000\002\013\003\000\002\014\005\000\002" +
    "\014\005\000\002\014\005\000\002\014\005\000\002\014" +
    "\003\000\002\015\003\000\002\015\003\000\002\015\003" +
    "\000\002\015\005\000\002\015\003\000\002\015\005\000" +
    "\002\015\005\000\002\020\011\000\002\020\015\000\002" +
    "\016\005\000\002\016\005\000\002\016\006\000\002\016" +
    "\003\000\002\017\005\000\002\017\005\000\002\017\005" +
    "\000\002\017\005\000\002\017\005\000\002\017\005\000" +
    "\002\021\011\000\002\022\012\000\002\023\005\000\002" +
    "\023\003\000\002\026\004\000\002\026\004\000\002\027" +
    "\004" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\157\000\020\007\017\011\007\012\022\014\021\015" +
    "\004\016\011\053\023\001\002\000\004\053\161\001\002" +
    "\000\024\002\ufffb\007\ufffb\011\ufffb\012\ufffb\014\ufffb\015" +
    "\ufffb\016\ufffb\052\ufffb\053\ufffb\001\002\000\022\002\000" +
    "\007\017\011\007\012\022\014\021\015\004\016\011\053" +
    "\023\001\002\000\004\045\153\001\002\000\024\002\ufff7" +
    "\007\ufff7\011\ufff7\012\ufff7\014\ufff7\015\ufff7\016\ufff7\052" +
    "\ufff7\053\ufff7\001\002\000\004\045\141\001\002\000\024" +
    "\002\ufffe\007\ufffe\011\ufffe\012\ufffe\014\ufffe\015\ufffe\016" +
    "\ufffe\052\ufffe\053\ufffe\001\002\000\024\002\ufff9\007\ufff9" +
    "\011\ufff9\012\ufff9\014\ufff9\015\ufff9\016\ufff9\052\ufff9\053" +
    "\ufff9\001\002\000\024\002\ufffa\007\ufffa\011\ufffa\012\ufffa" +
    "\014\ufffa\015\ufffa\016\ufffa\052\ufffa\053\ufffa\001\002\000" +
    "\004\002\140\001\002\000\024\002\ufffc\007\ufffc\011\ufffc" +
    "\012\ufffc\014\ufffc\015\ufffc\016\ufffc\052\ufffc\053\ufffc\001" +
    "\002\000\004\045\077\001\002\000\024\002\ufffd\007\ufffd" +
    "\011\ufffd\012\ufffd\014\ufffd\015\ufffd\016\ufffd\052\ufffd\053" +
    "\ufffd\001\002\000\006\006\076\053\075\001\002\000\004" +
    "\053\061\001\002\000\004\040\025\001\002\000\024\002" +
    "\ufff8\007\ufff8\011\ufff8\012\ufff8\014\ufff8\015\ufff8\016\ufff8" +
    "\052\ufff8\053\ufff8\001\002\000\014\004\032\005\026\006" +
    "\033\045\031\053\027\001\002\000\066\002\uffe3\007\uffe3" +
    "\011\uffe3\012\uffe3\014\uffe3\015\uffe3\016\uffe3\017\uffe3\020" +
    "\uffe3\024\uffe3\025\uffe3\026\uffe3\027\uffe3\030\uffe3\031\uffe3" +
    "\032\uffe3\033\uffe3\034\uffe3\036\uffe3\037\uffe3\041\uffe3\044" +
    "\uffe3\046\uffe3\050\uffe3\052\uffe3\053\uffe3\001\002\000\066" +
    "\002\uffe0\007\uffe0\011\uffe0\012\uffe0\014\uffe0\015\uffe0\016" +
    "\uffe0\017\uffe0\020\uffe0\024\uffe0\025\uffe0\026\uffe0\027\uffe0" +
    "\030\uffe0\031\uffe0\032\uffe0\033\uffe0\034\uffe0\036\uffe0\037" +
    "\uffe0\041\uffe0\044\uffe0\046\uffe0\050\uffe0\052\uffe0\053\uffe0" +
    "\001\002\000\066\002\uffe5\007\uffe5\011\uffe5\012\uffe5\014" +
    "\uffe5\015\uffe5\016\uffe5\017\uffe5\020\uffe5\024\uffe5\025\uffe5" +
    "\026\uffe5\027\uffe5\030\uffe5\031\uffe5\032\uffe5\033\uffe5\034" +
    "\uffe5\036\uffe5\037\uffe5\041\uffe5\044\uffe5\046\uffe5\050\uffe5" +
    "\052\uffe5\053\uffe5\001\002\000\014\004\032\005\026\006" +
    "\033\045\031\053\027\001\002\000\066\002\uffe4\007\uffe4" +
    "\011\uffe4\012\uffe4\014\uffe4\015\uffe4\016\uffe4\017\uffe4\020" +
    "\uffe4\024\uffe4\025\uffe4\026\uffe4\027\uffe4\030\uffe4\031\uffe4" +
    "\032\uffe4\033\uffe4\034\uffe4\036\uffe4\037\uffe4\041\uffe4\044" +
    "\uffe4\046\uffe4\050\uffe4\052\uffe4\053\uffe4\001\002\000\066" +
    "\002\uffe2\007\uffe2\011\uffe2\012\uffe2\014\uffe2\015\uffe2\016" +
    "\uffe2\017\uffe2\020\uffe2\024\uffe2\025\uffe2\026\uffe2\027\uffe2" +
    "\030\uffe2\031\uffe2\032\uffe2\033\uffe2\034\uffe2\036\uffe2\037" +
    "\uffe2\041\uffe2\044\uffe2\046\uffe2\050\uffe2\052\uffe2\053\uffe2" +
    "\001\002\000\030\002\uffed\007\uffed\011\uffed\012\uffed\014" +
    "\uffed\015\uffed\016\uffed\030\046\031\047\052\uffed\053\uffed" +
    "\001\002\000\066\002\uffea\007\uffea\011\uffea\012\uffea\014" +
    "\uffea\015\uffea\016\uffea\017\036\020\041\024\uffea\025\uffea" +
    "\026\uffea\027\uffea\030\uffea\031\uffea\032\037\033\040\034" +
    "\uffea\036\uffea\037\uffea\041\uffea\044\uffea\046\uffea\050\uffea" +
    "\052\uffea\053\uffea\001\002\000\014\004\032\005\026\006" +
    "\033\045\031\053\027\001\002\000\014\004\032\005\026" +
    "\006\033\045\031\053\027\001\002\000\014\004\032\005" +
    "\026\006\033\045\031\053\027\001\002\000\014\004\032" +
    "\005\026\006\033\045\031\053\027\001\002\000\066\002" +
    "\uffe6\007\uffe6\011\uffe6\012\uffe6\014\uffe6\015\uffe6\016\uffe6" +
    "\017\uffe6\020\uffe6\024\uffe6\025\uffe6\026\uffe6\027\uffe6\030" +
    "\uffe6\031\uffe6\032\uffe6\033\uffe6\034\uffe6\036\uffe6\037\uffe6" +
    "\041\uffe6\044\uffe6\046\uffe6\050\uffe6\052\uffe6\053\uffe6\001" +
    "\002\000\066\002\uffe8\007\uffe8\011\uffe8\012\uffe8\014\uffe8" +
    "\015\uffe8\016\uffe8\017\uffe8\020\uffe8\024\uffe8\025\uffe8\026" +
    "\uffe8\027\uffe8\030\uffe8\031\uffe8\032\uffe8\033\uffe8\034\uffe8" +
    "\036\uffe8\037\uffe8\041\uffe8\044\uffe8\046\uffe8\050\uffe8\052" +
    "\uffe8\053\uffe8\001\002\000\066\002\uffe9\007\uffe9\011\uffe9" +
    "\012\uffe9\014\uffe9\015\uffe9\016\uffe9\017\uffe9\020\uffe9\024" +
    "\uffe9\025\uffe9\026\uffe9\027\uffe9\030\uffe9\031\uffe9\032\uffe9" +
    "\033\uffe9\034\uffe9\036\uffe9\037\uffe9\041\uffe9\044\uffe9\046" +
    "\uffe9\050\uffe9\052\uffe9\053\uffe9\001\002\000\066\002\uffe7" +
    "\007\uffe7\011\uffe7\012\uffe7\014\uffe7\015\uffe7\016\uffe7\017" +
    "\uffe7\020\uffe7\024\uffe7\025\uffe7\026\uffe7\027\uffe7\030\uffe7" +
    "\031\uffe7\032\uffe7\033\uffe7\034\uffe7\036\uffe7\037\uffe7\041" +
    "\uffe7\044\uffe7\046\uffe7\050\uffe7\052\uffe7\053\uffe7\001\002" +
    "\000\014\004\032\005\026\006\033\045\031\053\027\001" +
    "\002\000\014\004\032\005\026\006\033\045\031\053\027" +
    "\001\002\000\066\002\uffeb\007\uffeb\011\uffeb\012\uffeb\014" +
    "\uffeb\015\uffeb\016\uffeb\017\036\020\041\024\uffeb\025\uffeb" +
    "\026\uffeb\027\uffeb\030\uffeb\031\uffeb\032\037\033\040\034" +
    "\uffeb\036\uffeb\037\uffeb\041\uffeb\044\uffeb\046\uffeb\050\uffeb" +
    "\052\uffeb\053\uffeb\001\002\000\066\002\uffec\007\uffec\011" +
    "\uffec\012\uffec\014\uffec\015\uffec\016\uffec\017\036\020\041" +
    "\024\uffec\025\uffec\026\uffec\027\uffec\030\uffec\031\uffec\032" +
    "\037\033\040\034\uffec\036\uffec\037\uffec\041\uffec\044\uffec" +
    "\046\uffec\050\uffec\052\uffec\053\uffec\001\002\000\004\046" +
    "\057\001\002\000\010\030\046\031\047\046\056\001\002" +
    "\000\004\046\055\001\002\000\066\002\uffdf\007\uffdf\011" +
    "\uffdf\012\uffdf\014\uffdf\015\uffdf\016\uffdf\017\uffdf\020\uffdf" +
    "\024\uffdf\025\uffdf\026\uffdf\027\uffdf\030\uffdf\031\uffdf\032" +
    "\uffdf\033\uffdf\034\uffdf\036\uffdf\037\uffdf\041\uffdf\044\uffdf" +
    "\046\uffdf\050\uffdf\052\uffdf\053\uffdf\001\002\000\066\002" +
    "\uffe1\007\uffe1\011\uffe1\012\uffe1\014\uffe1\015\uffe1\016\uffe1" +
    "\017\uffe1\020\uffe1\024\uffe1\025\uffe1\026\uffe1\027\uffe1\030" +
    "\uffe1\031\uffe1\032\uffe1\033\uffe1\034\uffe1\036\uffe1\037\uffe1" +
    "\041\uffe1\044\uffe1\046\uffe1\050\uffe1\052\uffe1\053\uffe1\001" +
    "\002\000\066\002\uffde\007\uffde\011\uffde\012\uffde\014\uffde" +
    "\015\uffde\016\uffde\017\uffde\020\uffde\024\uffde\025\uffde\026" +
    "\uffde\027\uffde\030\uffde\031\uffde\032\uffde\033\uffde\034\uffde" +
    "\036\uffde\037\uffde\041\uffde\044\uffde\046\uffde\050\uffde\052" +
    "\uffde\053\uffde\001\002\000\006\013\073\053\061\001\002" +
    "\000\006\042\uffef\043\uffef\001\002\000\006\042\065\043" +
    "\064\001\002\000\006\013\ufff5\053\ufff5\001\002\000\004" +
    "\053\072\001\002\000\010\021\070\022\071\023\066\001" +
    "\002\000\006\013\ufff0\053\ufff0\001\002\000\006\013\ufff3" +
    "\053\ufff3\001\002\000\006\013\ufff2\053\ufff2\001\002\000" +
    "\006\013\ufff1\053\ufff1\001\002\000\006\042\uffee\043\uffee" +
    "\001\002\000\024\002\ufff6\007\ufff6\011\ufff6\012\ufff6\014" +
    "\ufff6\015\ufff6\016\ufff6\052\ufff6\053\ufff6\001\002\000\006" +
    "\013\ufff4\053\ufff4\001\002\000\024\002\uffcd\007\uffcd\011" +
    "\uffcd\012\uffcd\014\uffcd\015\uffcd\016\uffcd\052\uffcd\053\uffcd" +
    "\001\002\000\024\002\uffcc\007\uffcc\011\uffcc\012\uffcc\014" +
    "\uffcc\015\uffcc\016\uffcc\052\uffcc\053\uffcc\001\002\000\016" +
    "\004\032\005\026\006\033\035\100\045\031\053\027\001" +
    "\002\000\004\045\135\001\002\000\010\036\131\037\132" +
    "\046\uffd8\001\002\000\022\024\122\025\120\026\117\027" +
    "\115\030\046\031\047\034\116\041\121\001\002\000\004" +
    "\046\104\001\002\000\004\051\105\001\002\000\020\007" +
    "\017\011\007\012\022\014\021\015\004\016\011\053\023" +
    "\001\002\000\022\007\017\011\007\012\022\014\021\015" +
    "\004\016\011\052\110\053\023\001\002\000\024\002\uffff" +
    "\007\uffff\011\uffff\012\uffff\014\uffff\015\uffff\016\uffff\052" +
    "\uffff\053\uffff\001\002\000\026\002\uffdd\007\uffdd\010\111" +
    "\011\uffdd\012\uffdd\014\uffdd\015\uffdd\016\uffdd\052\uffdd\053" +
    "\uffdd\001\002\000\004\051\112\001\002\000\020\007\017" +
    "\011\007\012\022\014\021\015\004\016\011\053\023\001" +
    "\002\000\022\007\017\011\007\012\022\014\021\015\004" +
    "\016\011\052\114\053\023\001\002\000\024\002\uffdc\007" +
    "\uffdc\011\uffdc\012\uffdc\014\uffdc\015\uffdc\016\uffdc\052\uffdc" +
    "\053\uffdc\001\002\000\014\004\032\005\026\006\033\045" +
    "\031\053\027\001\002\000\014\004\032\005\026\006\033" +
    "\045\031\053\027\001\002\000\014\004\032\005\026\006" +
    "\033\045\031\053\027\001\002\000\014\004\032\005\026" +
    "\006\033\045\031\053\027\001\002\000\014\004\032\005" +
    "\026\006\033\045\031\053\027\001\002\000\014\004\032" +
    "\005\026\006\033\045\031\053\027\001\002\000\014\030" +
    "\046\031\047\036\uffd7\037\uffd7\046\uffd7\001\002\000\014" +
    "\030\046\031\047\036\uffd3\037\uffd3\046\uffd3\001\002\000" +
    "\014\030\046\031\047\036\uffd6\037\uffd6\046\uffd6\001\002" +
    "\000\014\030\046\031\047\036\uffd5\037\uffd5\046\uffd5\001" +
    "\002\000\014\030\046\031\047\036\uffd2\037\uffd2\046\uffd2" +
    "\001\002\000\014\030\046\031\047\036\uffd4\037\uffd4\046" +
    "\uffd4\001\002\000\014\004\032\005\026\006\033\045\031" +
    "\053\027\001\002\000\014\004\032\005\026\006\033\045" +
    "\031\053\027\001\002\000\004\046\uffda\001\002\000\004" +
    "\046\uffdb\001\002\000\014\004\032\005\026\006\033\045" +
    "\031\053\027\001\002\000\004\046\137\001\002\000\004" +
    "\046\uffd9\001\002\000\004\002\001\001\002\000\004\053" +
    "\142\001\002\000\004\044\143\001\002\000\004\047\144" +
    "\001\002\000\014\004\032\005\026\006\033\045\031\053" +
    "\027\001\002\000\012\030\046\031\047\044\uffce\050\uffce" +
    "\001\002\000\006\044\147\050\150\001\002\000\014\004" +
    "\032\005\026\006\033\045\031\053\027\001\002\000\004" +
    "\046\151\001\002\000\024\002\uffd0\007\uffd0\011\uffd0\012" +
    "\uffd0\014\uffd0\015\uffd0\016\uffd0\052\uffd0\053\uffd0\001\002" +
    "\000\012\030\046\031\047\044\uffcf\050\uffcf\001\002\000" +
    "\016\004\032\005\026\006\033\035\100\045\031\053\027" +
    "\001\002\000\004\046\155\001\002\000\004\051\156\001" +
    "\002\000\020\007\017\011\007\012\022\014\021\015\004" +
    "\016\011\053\023\001\002\000\022\007\017\011\007\012" +
    "\022\014\021\015\004\016\011\052\160\053\023\001\002" +
    "\000\024\002\uffd1\007\uffd1\011\uffd1\012\uffd1\014\uffd1\015" +
    "\uffd1\016\uffd1\052\uffd1\053\uffd1\001\002\000\024\002\uffcb" +
    "\007\uffcb\011\uffcb\012\uffcb\014\uffcb\015\uffcb\016\uffcb\052" +
    "\uffcb\053\uffcb\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\157\000\026\002\014\003\005\004\017\011\011\012" +
    "\015\020\004\021\013\022\012\026\023\027\007\001\001" +
    "\000\002\001\001\000\002\001\001\000\022\004\017\011" +
    "\106\012\015\020\004\021\013\022\012\026\023\027\007" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\010\005\057\006\062" +
    "\010\061\001\001\000\002\001\001\000\002\001\001\000" +
    "\010\013\033\014\034\015\027\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\014\013\052\014" +
    "\034\015\027\024\053\025\051\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\015\044\001\001\000\004\015\043\001\001\000\004" +
    "\015\042\001\001\000\004\015\041\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\006\014\050\015\027\001\001\000\006\014\047\015" +
    "\027\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\006\006\073" +
    "\010\061\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\007\066\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\014\013" +
    "\101\014\034\015\027\016\102\017\100\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\024\003\105\004\017\011\011" +
    "\012\015\020\004\021\013\022\012\026\023\027\007\001" +
    "\001\000\022\004\017\011\106\012\015\020\004\021\013" +
    "\022\012\026\023\027\007\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\024\003\112\004\017" +
    "\011\011\012\015\020\004\021\013\022\012\026\023\027" +
    "\007\001\001\000\022\004\017\011\106\012\015\020\004" +
    "\021\013\022\012\026\023\027\007\001\001\000\002\001" +
    "\001\000\010\013\127\014\034\015\027\001\001\000\010" +
    "\013\126\014\034\015\027\001\001\000\010\013\125\014" +
    "\034\015\027\001\001\000\010\013\124\014\034\015\027" +
    "\001\001\000\010\013\123\014\034\015\027\001\001\000" +
    "\010\013\122\014\034\015\027\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\012\013\101\014\034" +
    "\015\027\017\133\001\001\000\012\013\101\014\034\015" +
    "\027\017\132\001\001\000\002\001\001\000\002\001\001" +
    "\000\012\013\101\014\034\015\027\017\135\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\012\013" +
    "\144\014\034\015\027\023\145\001\001\000\002\001\001" +
    "\000\002\001\001\000\010\013\151\014\034\015\027\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\014\013\101\014\034\015\027\016\153\017\100\001" +
    "\001\000\002\001\001\000\002\001\001\000\024\003\156" +
    "\004\017\011\011\012\015\020\004\021\013\022\012\026" +
    "\023\027\007\001\001\000\022\004\017\011\106\012\015" +
    "\020\004\021\013\022\012\026\023\027\007\001\001\000" +
    "\002\001\001\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$AnalizadorSintactico$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$AnalizadorSintactico$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$AnalizadorSintactico$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}



    public void syntax_error(Symbol cur_token) {
        String errMsg = "Syntax error -> " + cur_token.value.toString() + " <- " + cur_token.left + ":" +  cur_token.right + "\n";
        report_error(errMsg, null);
    }

    public void unrecovered_syntax_error(Symbol cur_token) throws Exception {
        String errMsg = "Couldn't repair and continue parse ->" + cur_token.value.toString() + "<- " + cur_token.left + ":" +  cur_token.right + "\n";
        report_fatal_error(errMsg, null);
    }


/** Cup generated class to encapsulate user supplied action code.*/
@SuppressWarnings({"rawtypes", "unchecked", "unused"})
class CUP$AnalizadorSintactico$actions {


     public SymbolTable tablaDeSimbolos = new SymbolTable();
     public ArrayList<String> identifierList = new ArrayList();

  private final AnalizadorSintactico parser;

  /** Constructor */
  CUP$AnalizadorSintactico$actions(AnalizadorSintactico parser) {
    this.parser = parser;
  }

  /** Method 0 with the actual generated action code for actions 0 to 300. */
  public final java_cup.runtime.Symbol CUP$AnalizadorSintactico$do_action_part00000000(
    int                        CUP$AnalizadorSintactico$act_num,
    java_cup.runtime.lr_parser CUP$AnalizadorSintactico$parser,
    java.util.Stack            CUP$AnalizadorSintactico$stack,
    int                        CUP$AnalizadorSintactico$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$AnalizadorSintactico$result;

      /* select the action based on the action number */
      switch (CUP$AnalizadorSintactico$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= inicio EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).right;
		Symbol start_val = (Symbol)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).value;
		RESULT = start_val;
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$AnalizadorSintactico$parser.done_parsing();
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // inicio ::= programa 
            {
              Symbol RESULT =null;
		
                         tablaDeSimbolos.save();
                         System.out.println("Compilacion exitosa.");
                         System.out.println("<3 Gracias por utilizar el compilador desarrollado por el Grupo 2. <3");
                    
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("inicio",0, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // programa ::= programa sentencia 
            {
              Symbol RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("programa",1, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // programa ::= sentencia 
            {
              Symbol RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("programa",1, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // sentencia ::= declaracion 
            {
              Symbol RESULT =null;
		
                         System.out.println("sentencia -> declaracion");
                    
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("sentencia",7, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // sentencia ::= asignacion 
            {
              Symbol RESULT =null;
		
                         System.out.println("sentencia -> asignacion");
                    
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("sentencia",7, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // sentencia ::= if 
            {
              Symbol RESULT =null;
		
                         System.out.println("sentencia -> if");
                    
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("sentencia",7, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // sentencia ::= while 
            {
              Symbol RESULT =null;
		
                         System.out.println("sentencia -> while");
                    
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("sentencia",7, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // sentencia ::= inlist 
            {
              Symbol RESULT =null;
		
                         System.out.println("sentencia -> inlist");
                    
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("sentencia",7, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // sentencia ::= write 
            {
              Symbol RESULT =null;
		
                         System.out.println("sentencia -> write");
                    
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("sentencia",7, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // sentencia ::= read 
            {
              Symbol RESULT =null;
		
                         System.out.println("sentencia -> read");
                    
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("sentencia",7, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // declaracion ::= DECVAR declaraciones ENDDEC 
            {
              Symbol RESULT =null;
		 
                         System.out.println("declaracion -> DECVAR declaraciones ENDDEC");
                    
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("declaracion",2, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // declaraciones ::= declarar 
            {
              Symbol RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("declaraciones",3, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // declaraciones ::= declaraciones declarar 
            {
              Symbol RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("declaraciones",3, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // declarar ::= identificadores OP_TYPE tipodedato 
            {
              Symbol RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("declarar",4, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // tipodedato ::= INTEGER_TYPE 
            {
              Symbol RESULT =null;
		
                         tablaDeSimbolos.addIdentifiers(this.identifierList, "INTEGER");
                    
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("tipodedato",5, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // tipodedato ::= FLOAT_TYPE 
            {
              Symbol RESULT =null;
		
                         tablaDeSimbolos.addIdentifiers(this.identifierList, "FLOAT");                       
                    
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("tipodedato",5, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // tipodedato ::= STRING_TYPE 
            {
              Symbol RESULT =null;
		
                         tablaDeSimbolos.addIdentifiers(this.identifierList, "STRING");                         
                    
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("tipodedato",5, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // identificadores ::= IDENTIFICADOR 
            {
              Symbol RESULT =null;
		int IDleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).left;
		int IDright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).right;
		String ID = (String)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.peek()).value;
		
                         this.identifierList.add(ID);
                    
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("identificadores",6, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // identificadores ::= identificadores COMA IDENTIFICADOR 
            {
              Symbol RESULT =null;
		int IDleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).left;
		int IDright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).right;
		String ID = (String)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.peek()).value;
		
                         this.identifierList.add(ID);
                    
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("identificadores",6, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // asignacion ::= IDENTIFICADOR OP_ASIG expresion 
            {
              Symbol RESULT =null;
		
                         System.out.println("asignacion -> IDENTIFICADOR OP_ASIG expresion");
                    
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("asignacion",8, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // expresion ::= expresion OP_PLUS termino 
            {
              Symbol RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("expresion",9, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // expresion ::= expresion OP_MINUS termino 
            {
              Symbol RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("expresion",9, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // expresion ::= termino 
            {
              Symbol RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("expresion",9, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // termino ::= termino OP_MULTI factor 
            {
              Symbol RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("termino",10, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // termino ::= termino OP_DIVISION factor 
            {
              Symbol RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("termino",10, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // termino ::= termino MOD factor 
            {
              Symbol RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("termino",10, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // termino ::= termino DIV factor 
            {
              Symbol RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("termino",10, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // termino ::= factor 
            {
              Symbol RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("termino",10, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // factor ::= CONSTANTE_ENTERA 
            {
              Symbol RESULT =null;
		int CTE_ENTleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).left;
		int CTE_ENTright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).right;
		String CTE_ENT = (String)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.peek()).value;
		
                         tablaDeSimbolos.add("_"+CTE_ENT, null, CTE_ENT, null);
                    
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("factor",11, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // factor ::= CONSTANTE_FLOAT 
            {
              Symbol RESULT =null;
		int CTE_FLOATleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).left;
		int CTE_FLOATright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).right;
		String CTE_FLOAT = (String)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.peek()).value;
		
                         tablaDeSimbolos.add("_"+CTE_FLOAT, null, CTE_FLOAT, null);                         
                    
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("factor",11, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // factor ::= CONSTANTE_STRING 
            {
              Symbol RESULT =null;
		int CTE_STRINGleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).left;
		int CTE_STRINGright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).right;
		String CTE_STRING = (String)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.peek()).value;
		
                         String str = CTE_STRING.replace("\"", "");
                         tablaDeSimbolos.add("_"+str, null, str, str.length());
                    
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("factor",11, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // factor ::= PAREN_OPEN expresion PAREN_CLOSE 
            {
              Symbol RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("factor",11, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // factor ::= IDENTIFICADOR 
            {
              Symbol RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("factor",11, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // factor ::= PAREN_OPEN mod PAREN_CLOSE 
            {
              Symbol RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("factor",11, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // factor ::= PAREN_OPEN div PAREN_CLOSE 
            {
              Symbol RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("factor",11, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // if ::= IF PAREN_OPEN condicion PAREN_CLOSE LLAVE_OPEN programa LLAVE_CLOSE 
            {
              Symbol RESULT =null;
		
                         System.out.println("if -> IF PAREN_OPEN condicion PAREN_CLOSE LLAVE_OPEN programa LLAVE_CLOSE");
                    
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("if",14, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-6)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // if ::= IF PAREN_OPEN condicion PAREN_CLOSE LLAVE_OPEN programa LLAVE_CLOSE ELSE LLAVE_OPEN programa LLAVE_CLOSE 
            {
              Symbol RESULT =null;
		
                         System.out.println("if -> IF PAREN_OPEN condicion PAREN_CLOSE LLAVE_OPEN programa LLAVE_CLOSE ELSE LLAVE_OPEN programa LLAVE_CLOSE");
                    
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("if",14, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-10)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // condicion ::= comparacion OP_AND comparacion 
            {
              Symbol RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("condicion",12, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // condicion ::= comparacion OP_OR comparacion 
            {
              Symbol RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("condicion",12, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // condicion ::= OP_NOT PAREN_OPEN comparacion PAREN_CLOSE 
            {
              Symbol RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("condicion",12, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-3)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // condicion ::= comparacion 
            {
              Symbol RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("condicion",12, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // comparacion ::= expresion OP_GT expresion 
            {
              Symbol RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("comparacion",13, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // comparacion ::= expresion OP_LT expresion 
            {
              Symbol RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("comparacion",13, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // comparacion ::= expresion OP_GTE expresion 
            {
              Symbol RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("comparacion",13, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // comparacion ::= expresion OP_LTE expresion 
            {
              Symbol RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("comparacion",13, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // comparacion ::= expresion OP_EQ expresion 
            {
              Symbol RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("comparacion",13, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // comparacion ::= expresion OP_NE expresion 
            {
              Symbol RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("comparacion",13, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // while ::= WHILE PAREN_OPEN condicion PAREN_CLOSE LLAVE_OPEN programa LLAVE_CLOSE 
            {
              Symbol RESULT =null;
		
                         System.out.println("while -> WHILE PAREN_OPEN condicion PAREN_CLOSE LLAVE_OPEN programa LLAVE_CLOSE");
                    
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("while",15, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-6)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // inlist ::= INLIST PAREN_OPEN IDENTIFICADOR PUNTO_COMA CORCHETE_OPEN lista CORCHETE_CLOSE PAREN_CLOSE 
            {
              Symbol RESULT =null;
		
                         System.out.println("inlist -> INLIST PAREN_OPEN IDENTIFICADOR PUNTO_COMA CORCHETE_OPEN lista CORCHETE_CLOSE PAREN_CLOSE");
                    
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("inlist",16, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-7)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // lista ::= lista PUNTO_COMA expresion 
            {
              Symbol RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("lista",17, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // lista ::= expresion 
            {
              Symbol RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("lista",17, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // write ::= WRITE IDENTIFICADOR 
            {
              Symbol RESULT =null;
		
                         System.out.println("write -> WRITE IDENTIFICADOR");
                    
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("write",20, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // write ::= WRITE CONSTANTE_STRING 
            {
              Symbol RESULT =null;
		int CTE_STRINGleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).left;
		int CTE_STRINGright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).right;
		String CTE_STRING = (String)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.peek()).value;
		
                         String str = CTE_STRING.replace("\"", "");
                         System.out.println("write -> WRITE CONSTANTE_STRING");
                         tablaDeSimbolos.add("_"+str, null, str, str.length());
                    
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("write",20, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // read ::= READ IDENTIFICADOR 
            {
              Symbol RESULT =null;
		
                         System.out.println("read -> READ IDENTIFICADOR");
                    
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("read",21, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number "+CUP$AnalizadorSintactico$act_num+"found in internal parse table");

        }
    } /* end of method */

  /** Method splitting the generated action code into several parts. */
  public final java_cup.runtime.Symbol CUP$AnalizadorSintactico$do_action(
    int                        CUP$AnalizadorSintactico$act_num,
    java_cup.runtime.lr_parser CUP$AnalizadorSintactico$parser,
    java.util.Stack            CUP$AnalizadorSintactico$stack,
    int                        CUP$AnalizadorSintactico$top)
    throws java.lang.Exception
    {
              return CUP$AnalizadorSintactico$do_action_part00000000(
                               CUP$AnalizadorSintactico$act_num,
                               CUP$AnalizadorSintactico$parser,
                               CUP$AnalizadorSintactico$stack,
                               CUP$AnalizadorSintactico$top);
    }
}

}
