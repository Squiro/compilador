package Analizadores;
import java_cup.runtime.*;
import SymbolTable.*;
import java.util.LinkedList;
import java.util.ArrayList;
import java.util.Queue;

// Codigo que se le agrega a las acciones gramaticales
action code
{:
     public SymbolTable tablaDeSimbolos = new SymbolTable();
     public ArrayList<String> identifierList = new ArrayList();
:}

// Codigo que se le agrega al parser
parser code     
{:
    public void syntax_error(Symbol cur_token) {
        String errMsg = "Syntax error " + cur_token.value.toString() + " " + cur_token.right + ":" + cur_token.left + "\n";
        report_error(errMsg, null);
    }

    public void unrecovered_syntax_error(Symbol cur_token) throws Exception {
        String errMsg = "Couldn't repair and continue parse " + cur_token.value.toString() + " " + cur_token.right + ":" + cur_token.left + "\n";
        report_fatal_error(errMsg, null);
    }
:}

// Declaracion de terminales de constantes
terminal String CONSTANTE_ENTERA, CONSTANTE_FLOAT, CONSTANTE_STRING;

// Declaracion de terminales de palabras reservadas
terminal String IF, ELSE, WHILE, DECVAR, ENDDEC, WRITE, READ, INLIST, MOD, DIV, INTEGER_TYPE, FLOAT_TYPE, STRING_TYPE;

// Declaracion de terminales de operadores lÃ³gicos
terminal String OP_GT, OP_LT, OP_GTE, OP_LTE, OP_PLUS, OP_MINUS, OP_MULTI, OP_DIVISION, OP_MODULE, OP_INCREMENT, OP_DECREMENT,
                OP_NE, OP_NOT, OP_AND, OP_OR, OP_ASIG, OP_EQ, OP_TYPE;

// Declaracion de terminales de caracteres especiales
terminal String COMA, PUNTO_COMA, PAREN_OPEN, PAREN_CLOSE, CORCHETE_OPEN, CORCHETE_CLOSE, LLAVE_OPEN, LLAVE_CLOSE;

// Declaracion de construcciones del lenguaje
terminal String IDENTIFICADOR, COMMENT;

// Declaracion de no terminales
non terminal Symbol inicio, programa, declaracion, declaraciones, declarar, tipodedato, identificadores, sentencia, asignacion, expresion, termino, factor, 
                    condicion, comparacion, if, while, inlist, lista, mod, div;

start with inicio;

//Reglas gramaticales
inicio         	::= programa
                    {:
                         tablaDeSimbolos.save();
                         System.out.println("R1: inicio -> programa");
                         System.out.println("Compilacion exitosa.");
                         System.out.println("<3 Gracias por utilizar el compilador desarrollado por el Grupo 2. <3");
                    :};  

programa      		::= programa sentencia
                    {: 
                         System.out.println("programa -> declaracion sentencia");
                    :}
                    | sentencia
                    {: 
                         System.out.println("programa -> sentencia");
                    :};
sentencia           ::= declaracion
                    {:
                         System.out.println("sentencia -> declaracion");
                    :}
                    | asignacion 
                    {:
                         System.out.println("sentencia -> asignacion");
                    :}
                    | if 
                    {:
                         System.out.println("sentencia -> if");
                    :}
                    | while 
                    {:
                         System.out.println("sentencia -> while");
                    :};

/*
            DECLARACIONES
*/

declaracion         ::= DECVAR declaraciones ENDDEC
                    {: 
                         System.out.println("declaracion -> declaraciones");
                    :};

declaraciones      ::= declarar
                    {:
                         System.out.println("declaraciones -> declarar");
                    :}
                    | declaraciones declarar
                    {:
                         System.out.println("declaraciones declarar -> declarar");
                    :};

declarar            ::= identificadores OP_TYPE tipodedato
                    {:
                         System.out.println("declarar -> tipo de dato");
                    :};

tipodedato          ::= INTEGER_TYPE
                    {:
                         tablaDeSimbolos.addIdentifiers(this.identifierList, "INTEGER");
                         System.out.println("Tipo de dato: INTEGER");
                    :}
                    | FLOAT_TYPE
                    {:
                         tablaDeSimbolos.addIdentifiers(this.identifierList, "FLOAT");
                         System.out.println("Tipo de dato: FLOAT");
                    :}
                    | STRING_TYPE
                    {:
                         tablaDeSimbolos.addIdentifiers(this.identifierList, "STRING");
                         System.out.println("Tipo de dato: STRING");
                    :};

identificadores     ::= IDENTIFICADOR:ID
                    {:
                         this.identifierList.add(ID);
                         System.out.println("identificadores -> IDENTIFICADOR");
                    :}
                    | identificadores COMA IDENTIFICADOR:ID
                    {:
                         this.identifierList.add(ID);
                         System.out.println("identificadores -> identificadores COMA IDENTIFICADOR");
                    :};
/*
            ASIGNACION
*/
asignacion          ::= IDENTIFICADOR OP_ASIG expresion
                    {:
                         System.out.println("asignacion -> IDENTIFICADOR OP_ASIG expresion");
                    :};

expresion           ::= expresion OP_PLUS termino 
                    {:
                         System.out.println("expresion -> expresion OP_PLUS termino");
                    :}
                    | expresion OP_MINUS termino 
                    {:
                         System.out.println("expresion -> expresion OP_MINUS termino");
                    :}
                    | termino 
                    {:
                         System.out.println("expresion -> termino");
                    :};

termino             ::= termino OP_MULTI factor
                    {:
                         System.out.println("termino -> termino OP_MULTI factor");
                    :}
                    | termino OP_DIVISION factor
                    {:
                         System.out.println("termino -> termino OP_DIVISION factor");
                    :}
                    | factor 
                    {:
                         System.out.println("termino -> factor");
                    :};

factor              ::= CONSTANTE_ENTERA:CTE_ENT
                    {:
                         tablaDeSimbolos.add("_"+CTE_ENT, null, CTE_ENT, null);
                         System.out.println("factor -> CONSTANTE_ENTERA");
                    :}
                    | CONSTANTE_FLOAT:CTE_FLOAT
                    {:
                         tablaDeSimbolos.add("_"+CTE_FLOAT, null, CTE_FLOAT, null);
                         System.out.println("factor -> CONSTANTE_FLOAT");
                    :} 
                    | CONSTANTE_STRING:CTE_STRING
                    {:
                         tablaDeSimbolos.add("_"+CTE_STRING, null, CTE_STRING, CTE_STRING.length());
                         System.out.println("factor -> CONSTANTE_STRING");
                    :}
                    | PAREN_OPEN expresion PAREN_CLOSE 
                    {:
                         System.out.println("factor -> PAREN_OPEN expresion PAREN_CLOSE");
                    :}
                    | IDENTIFICADOR
                    {:
                         System.out.println("factor -> ID");
                    :}
                    | PAREN_OPEN mod PAREN_CLOSE
                    {:
                         System.out.println("factor -> PAREN_OPEN mod PAREN_CLOSE");
                    :}
                    | PAREN_OPEN div PAREN_CLOSE
                    {:
                         System.out.println("factor -> PAREN_OPEN div PAREN_CLOSE");
                    :};

mod                 ::= expresion MOD expresion 
                    {:
                         System.out.println("mod -> expresion MOD expresion");
                    :};

div                 ::=  expresion DIV expresion
                    {:
                         System.out.println("div -> expresion DIV expresion");
                    :};

/*
            IF/ELSE/CONDITION
*/
if                  ::= IF PAREN_OPEN condicion PAREN_CLOSE LLAVE_OPEN programa LLAVE_CLOSE
                    {:
                         System.out.println("if -> IF PAREN_OPEN condicion PAREN_CLOSE LLAVE_OPEN programa LLAVE_CLOSE");
                    :}
                    | IF PAREN_OPEN condicion PAREN_CLOSE LLAVE_OPEN programa LLAVE_CLOSE ELSE LLAVE_OPEN programa LLAVE_CLOSE 
                    {:
                         System.out.println("if -> IF PAREN_OPEN condicion PAREN_CLOSE LLAVE_OPEN programa LLAVE_CLOSE ELSE LLAVE_OPEN programa LLAVE_CLOSE");
                    :};

condicion           ::= comparacion OP_AND comparacion 
                    | comparacion OP_OR comparacion
                    | OP_NOT comparacion
                    | comparacion;

comparacion         ::= expresion OP_GT expresion 
                    | expresion OP_LT expresion
                    | expresion OP_GTE expresion 
                    | expresion OP_LTE expresion
                    | expresion OP_EQ expresion
                    | expresion OP_NE expresion;

/*
            WHILE
*/

while               ::= WHILE PAREN_OPEN condicion PAREN_CLOSE LLAVE_OPEN programa LLAVE_CLOSE  
                    {:
                         System.out.println("while -> WHILE PAREN_OPEN condicion PAREN_CLOSE LLAVE_OPEN programa LLAVE_CLOSE");
                    :};

