package Analizadores;
import java_cup.runtime.*;
import SymbolTable.*;
import java.util.LinkedList;
import java.util.Queue;

// Codigo que se le agrega a las acciones gramaticales
action code
{:
     public SymbolTable tablaDeSimbolos = new SymbolTable();
     public Queue<String> dataTypeQueue = new LinkedList(); 
     public Queue<String> variableNameQueue = new LinkedList();
:}

// Codigo que se le agrega al parser
parser code     
{:
    public void syntax_error(Symbol cur_token) {
        String errMsg = "Syntax error " + cur_token.value.toString() + " " + cur_token.right + ":" + cur_token.left + "\n";
        report_error(errMsg, null);
    }

    public void unrecovered_syntax_error(Symbol cur_token) throws Exception {
        String errMsg = "Couldn't repair and continue parse " + cur_token.value.toString() + " " + cur_token.right + ":" + cur_token.left + "\n";
        report_fatal_error(errMsg, null);
    }
:}

// Declaracion de terminales de constantes
terminal String CONSTANTE_ENTERA, CONSTANTE_FLOAT, STRING;

// Declaracion de terminales de palabras reservadas
terminal String IF, WHILE, DECVAR, ENDDEC, INTEGER, FLOAT, WRITE, READ, INLIST, MOD, DIV;

// Declaracion de terminales de operadores lÃ³gicos
terminal String OP_GT, OP_LT, OP_GTE, OP_LTE, OP_PLUS, OP_MINUS, OP_MULTI, OP_DIVISION, OP_MODULE, OP_INCREMENT, OP_DECREMENT,
                OP_NE, OP_NOT, OP_AND, OP_OR, OP_ASIG, OP_EQ, OP_TYPE;

// Declaracion de terminales de caracteres especiales
terminal String COMA, PUNTO_COMA, PAREN_OPEN, PAREN_CLOSE, CORCHETE_OPEN, CORCHETE_CLOSE, LLAVE_OPEN, LLAVE_CLOSE;

// Declaracion de construcciones del lenguaje
terminal String IDENTIFICADOR, COMMENT;

// Declaracion de no terminales
non terminal Symbol inicio, programa, declaracion, declaraciones, declarar, tipodedato, identificadores, sentencia, asignacion, expresion, termino, factor, condicion, comparacion, if, while, inlist, lista;

start with inicio;

//Reglas gramaticales
inicio         	::= programa
                    {:  
                         //tablaDeSimbolos.addVariables();
                         tablaDeSimbolos.save();
                         System.out.println("R1: inicio -> programa");
                         System.out.println("Compilacion exitosa.");
                         System.out.println("<3 Gracias por utilizar el compilador desarrollado por el Grupo 2. <3");
                    :};  
programa      		::= declaracion sentencia
                    {: 
                         System.out.println("programa -> declaracion sentencia");
                    :}
                    | sentencia
                    {: 
                         System.out.println("programa -> sentencia");
                    :};

declaracion         ::= DECVAR declaraciones ENDDEC
                    {: 
                         System.out.println("declaracion -> declaraciones");
                    :};

declaraciones      ::= declarar
                    {:
                         System.out.println("declaraciones -> declarar");
                    :}
                    | declaraciones declarar
                    {:
                         System.out.println("declaraciones declarar -> declarar");
                    :};

declarar            ::= identificadores OP_TYPE tipodedato
                    {:
                         System.out.println("declarar -> tipo de dato");
                    :};

tipodedato          ::= INTEGER
                    {:
                         System.out.println("Tipo de dato: INTEGER");
                    :}
                    | FLOAT
                    {:
                         System.out.println("Tipo de dato: FLOAT");
                    :}
                    | STRING
                    {:
                         System.out.println("Tipo de dato: STRING");
                    :};

identificadores     ::= IDENTIFICADOR
                    {:
                    System.out.println("identificadores -> IDENTIFICADOR");
                    :}
                    | identificadores COMA IDENTIFICADOR
                    {:
                    System.out.println("identificadores -> identificadores COMA IDENTIFICADOR");
                    :};

sentencia      ::= asignacion
                    {:
                         System.out.println("sentencia -> asignacion");
                    :};
asignacion     ::=  IDENTIFICADOR OP_ASIG CONSTANTE_ENTERA:CONSTANTE_ENTERA
                    {: 
                         tablaDeSimbolos.add("_"+CONSTANTE_ENTERA, null, CONSTANTE_ENTERA, null);
                         System.out.println("R10: asig -> ID OP_ASIG expresion");
                    :};
